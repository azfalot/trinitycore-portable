diff -rupN ORIG/TrinityCore/cmake/compiler/gcc/settings.cmake PCA/trinitycore-portable/cmake/compiler/gcc/settings.cmake
--- ORIG/TrinityCore/cmake/compiler/gcc/settings.cmake	2014-03-17 18:27:26.807099245 +0000
+++ PCA/trinitycore-portable/cmake/compiler/gcc/settings.cmake	2014-03-17 18:31:22.483103479 +0000
@@ -1,14 +1,26 @@
 # Set build-directive (used in core to tell which buildtype we used)
 add_definitions(-D_BUILD_DIRECTIVE='"${CMAKE_BUILD_TYPE}"')
 
-if(PLATFORM EQUAL 32)
-  # Required on 32-bit systems to enable SSE2 (standard on x64)
-  set(SSE_FLAGS "-msse2 -mfpmath=sse")
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SSE_FLAGS}")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SSE_FLAGS}")
+if( SKIP_SSE2 )
+  message(STATUS "GCC: MersenneTwister enabled, SSE2 flags not set")
+  if( STANDARDIZE_ASM )
+    message(STATUS "GCC: Using standardized ASM, good for cross-platform")
+  endif()
+else()
+  if( STANDARDIZE_ASM )
+    message(STATUS "GCC: Using standardized ASM, good for cross-platform. Also disabling SSE2")
+    add_definitions(-DUSE_MERSENNETWISTER)
+  else()
+    if(PLATFORM EQUAL 32)
+      # Required on 32-bit systems to enable SSE2 (standard on x64)
+      set(SSE_FLAGS "-msse2 -mfpmath=sse")
+      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SSE_FLAGS}")
+      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SSE_FLAGS}")
+    endif()
+    add_definitions(-DHAVE_SSE2 -D__SSE2__)
+    message(STATUS "GCC: SFMT enabled, SSE2 flags set")
+  endif()
 endif()
-add_definitions(-DHAVE_SSE2 -D__SSE2__)
-message(STATUS "GCC: SFMT enabled, SSE2 flags forced")
 
 if( WITH_WARNINGS )
   set(WARNING_FLAGS "-W -Wall -Wextra -Winit-self -Winvalid-pch -Wfatal-errors")
diff -rupN ORIG/TrinityCore/cmake/compiler/icc/settings.cmake PCA/trinitycore-portable/cmake/compiler/icc/settings.cmake
--- ORIG/TrinityCore/cmake/compiler/icc/settings.cmake	2014-03-17 18:27:26.807099245 +0000
+++ PCA/trinitycore-portable/cmake/compiler/icc/settings.cmake	2014-03-17 18:32:14.427104412 +0000
@@ -1,10 +1,22 @@
 # Set build-directive (used in core to tell which buildtype we used)
 add_definitions(-D_BUILD_DIRECTIVE="'${CMAKE_BUILD_TYPE}'")
 
-if(PLATFORM EQUAL 32)
-  add_definitions(-axSSE2)
+if( SKIP_SSE2 )
+  message(STATUS "ICC: MersenneTwister enabled, SSE2 flags not set")
+  if( STANDARDIZE_ASM )
+    message(STATUS "ICC: Using standardized ASM, good for cross-platform")
+  endif()
 else()
-  add_definitions(-xSSE2)
+  if( STANDARDIZE_ASM )
+    message(STATUS "ICC: Using standardized ASM, good for cross-platform. Also disabling SSE2")
+    add_definitions(-DUSE_MERSENNETWISTER)
+  else()
+    if(PLATFORM EQUAL 32)
+      add_definitions(-axSSE2)
+    else()
+      add_definitions(-xSSE2)
+    endif()
+  endif()
 endif()
 
 if( WITH_WARNINGS )
diff -rupN ORIG/TrinityCore/cmake/compiler/mingw/settings.cmake PCA/trinitycore-portable/cmake/compiler/mingw/settings.cmake
--- ORIG/TrinityCore/cmake/compiler/mingw/settings.cmake	2014-03-17 18:27:26.807099245 +0000
+++ PCA/trinitycore-portable/cmake/compiler/mingw/settings.cmake	2014-03-17 18:32:23.363104573 +0000
@@ -4,14 +4,26 @@ set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMA
 # Set build-directive (used in core to tell which buildtype we used)
 add_definitions(-D_BUILD_DIRECTIVE=\\"${CMAKE_BUILD_TYPE}\\")
 
-if(PLATFORM EQUAL 32)
-  # Required on 32-bit systems to enable SSE2 (standard on x64)
-  set(SSE_FLAGS "-msse2 -mfpmath=sse")
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SSE_FLAGS}")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SSE_FLAGS}")
+if( SKIP_SSE2 )
+  message(STATUS "GCC: MersenneTwister enabled, SSE2 flags not set")
+  if( STANDARDIZE_ASM )
+    message(STATUS "GCC: Using standardized ASM, good for cross-platform")
+  endif()
+else()
+  if( STANDARDIZE_ASM )
+    message(STATUS "GCC: Using standardized ASM, good for cross-platform. Also disabling SSE2")
+    add_definitions(-DUSE_MERSENNETWISTER)
+  else()
+    if(PLATFORM EQUAL 32)
+      # Required on 32-bit systems to enable SSE2 (standard on x64)
+      set(SSE_FLAGS "-msse2 -mfpmath=sse")
+      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SSE_FLAGS}")
+      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SSE_FLAGS}")
+    endif()
+    add_definitions(-DHAVE_SSE2 -D__SSE2__)
+    message(STATUS "GCC: SFMT enabled, SSE2 flags set")
+  endif()
 endif()
-add_definitions(-DHAVE_SSE2 -D__SSE2__)
-message(STATUS "GCC: SFMT enabled, SSE2 flags forced")
 
 if( WITH_WARNINGS )
   set(WARNING_FLAGS "-W -Wall -Wextra -Winit-self -Winvalid-pch -Wfatal-errors")
diff -rupN ORIG/TrinityCore/cmake/compiler/msvc/settings.cmake PCA/trinitycore-portable/cmake/compiler/msvc/settings.cmake
--- ORIG/TrinityCore/cmake/compiler/msvc/settings.cmake	2014-03-17 18:27:26.807099245 +0000
+++ PCA/trinitycore-portable/cmake/compiler/msvc/settings.cmake	2014-03-17 18:32:39.335104859 +0000
@@ -19,9 +19,20 @@ else()
   # mark 32 bit executables large address aware so they can use > 2GB address space
   set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE")
   message(STATUS "MSVC: Enabled large address awareness")
-
-  add_definitions(/arch:SSE2)
-  message(STATUS "MSVC: Enabled SSE2 support")
+  if( SKIP_SSE2 )
+    message(STATUS "MSVC: Disabled SSE2 support")
+    if( STANDARDIZE_ASM )
+      message(STATUS "GCC: Using standardized ASM, good for cross-platform.")
+    endif()
+  else()
+    if( STANDARDIZE_ASM )
+      message(STATUS "GCC: Using standardized ASM, good for cross-platform. Also disabling SSE2")
+      add_definitions(-DUSE_MERSENNETWISTER)
+    else()
+      add_definitions(/arch:SSE2)
+      message(STATUS "MSVC: Enabled SSE2 support")
+    endif()
+  endif()
 endif()
 
 # Set build-directive (used in core to tell which buildtype we used)
diff -rupN ORIG/TrinityCore/cmake/options.cmake PCA/trinitycore-portable/cmake/options.cmake
--- ORIG/TrinityCore/cmake/options.cmake	2014-03-17 18:27:26.807099245 +0000
+++ PCA/trinitycore-portable/cmake/options.cmake	2014-03-17 18:32:50.551105061 +0000
@@ -13,6 +13,8 @@ option(SCRIPTS          "Build core with
 option(TOOLS            "Build map/vmap/mmap extraction/assembler tools"              0)
 option(USE_SCRIPTPCH    "Use precompiled headers when compiling scripts"              1)
 option(USE_COREPCH      "Use precompiled headers when compiling servers"              1)
+option(SKIP_SSE2        "Use MersenneTwister and disable SSE2"                        0)
+option(STANDARDIZE_ASM  "Use standard atomic calls and ASM, GCC|ICC support only"     0)
 option(WITH_WARNINGS    "Show all warnings during compile"                            0)
 option(WITH_COREDEBUG   "Include additional debug-code in core"                       0)
 option(WITH_MESHEXTRACTOR "Build meshextractor (alpha)"                               0)
diff -rupN ORIG/TrinityCore/cmake/showoptions.cmake PCA/trinitycore-portable/cmake/showoptions.cmake
--- ORIG/TrinityCore/cmake/showoptions.cmake	2014-03-17 18:27:26.807099245 +0000
+++ PCA/trinitycore-portable/cmake/showoptions.cmake	2014-03-17 18:33:16.499105527 +0000
@@ -49,6 +49,20 @@ else()
   message("* Build scripts w/PCH    : No")
 endif()
 
+if( SKIP_SSE2 )
+  message("* Skip SSE2              : Yes")
+  add_definitions(-DUSE_MERSENNETWISTER)
+else()
+  message("* Skip SSE2              : No (default)")
+endif()
+
+if( STANDARDIZE_ASM )
+  message("* Standardize ASM (GCC)  : Yes")
+  add_definitions(-DUSE_STANDARD_ASM)
+else()
+  message("* Standardize ASM (GCC)  : No (default)")
+endif()
+
 if( WITH_WARNINGS )
   message("* Show all warnings      : Yes")
 else()
diff -rupN ORIG/TrinityCore/dep/g3dlite/include/G3D/AtomicInt32.h PCA/trinitycore-portable/dep/g3dlite/include/G3D/AtomicInt32.h
--- ORIG/TrinityCore/dep/g3dlite/include/G3D/AtomicInt32.h	2014-03-17 18:27:26.919099247 +0000
+++ PCA/trinitycore-portable/dep/g3dlite/include/G3D/AtomicInt32.h	2014-03-17 18:33:41.995105985 +0000
@@ -76,13 +76,16 @@ public:
 
 #       elif defined(G3D_LINUX) || defined(G3D_FREEBSD)
 
-            int32 old;
-            asm volatile ("lock; xaddl %0,%1"
-                  : "=r"(old), "=m"(m_value) /* outputs */
-                  : "0"(x), "m"(m_value)   /* inputs */
-                  : "memory", "cc");
-            return old;
-            
+#           if defined( USE_STANDARD_ASM )
+                return __sync_fetch_and_add(&m_value, x);
+#           else
+                int32 old;
+                asm volatile ("lock; xaddl %0,%1"
+                      : "=r"(old), "=m"(m_value) /* outputs */
+                      : "0"(x), "m"(m_value)   /* inputs */
+                      : "memory", "cc");
+                return old;
+#           endif
 #       elif defined(G3D_OSX)
 
             int32 old = m_value;
@@ -115,14 +118,20 @@ public:
             // Note: returns the newly decremented value
             return InterlockedDecrement(&m_value);
 #       elif defined(G3D_LINUX)  || defined(G3D_FREEBSD)
-            unsigned char nz;
 
-            asm volatile ("lock; decl %1;\n\t"
-                          "setnz %%al"
-                          : "=a" (nz)
-                          : "m" (m_value)
-                          : "memory", "cc");
-            return nz;
+#           if defined( USE_STANDARD_ASM )
+                return __sync_sub_and_fetch(&m_value, 1);
+#           else
+
+                unsigned char nz;
+
+                asm volatile ("lock; decl %1;\n\t"
+                              "setnz %%al"
+                              : "=a" (nz)
+                              : "m" (m_value)
+                              : "memory", "cc");
+                return nz;
+#           endif
 #       elif defined(G3D_OSX)
             // Note: returns the newly decremented value
             return OSAtomicDecrement32(&m_value);
@@ -143,17 +152,21 @@ public:
 #       if defined(G3D_WIN32)
             return InterlockedCompareExchange(&m_value, exchange, comperand);
 #       elif defined(G3D_LINUX) || defined(G3D_FREEBSD) || defined(G3D_OSX)
-            // Based on Apache Portable Runtime
-            // http://koders.com/c/fid3B6631EE94542CDBAA03E822CA780CBA1B024822.aspx
-            int32 ret;
-            asm volatile ("lock; cmpxchgl %1, %2"
-                          : "=a" (ret)
-                          : "r" (exchange), "m" (m_value), "0"(comperand)
-                          : "memory", "cc");
-            return ret;
-
-            // Note that OSAtomicCompareAndSwap32 does not return a useful value for us
-            // so it can't satisfy the cmpxchgl contract.
+#           if defined( USE_STANDARD_ASM )
+                return __sync_val_compare_and_swap(&m_value, comperand, exchange);
+#           else
+                // Based on Apache Portable Runtime
+                // http://koders.com/c/fid3B6631EE94542CDBAA03E822CA780CBA1B024822.aspx
+                int32 ret;
+                asm volatile ("lock; cmpxchgl %1, %2"
+                              : "=a" (ret)
+                              : "r" (exchange), "m" (m_value), "0"(comperand)
+                              : "memory", "cc");
+                return ret;
+
+                // Note that OSAtomicCompareAndSwap32 does not return a useful value for us
+                // so it can't satisfy the cmpxchgl contract.
+#           endif
 #       endif
     }
 
diff -rupN ORIG/TrinityCore/dep/g3dlite/include/G3D/platform.h PCA/trinitycore-portable/dep/g3dlite/include/G3D/platform.h
--- ORIG/TrinityCore/dep/g3dlite/include/G3D/platform.h	2014-03-17 18:27:26.927099247 +0000
+++ PCA/trinitycore-portable/dep/g3dlite/include/G3D/platform.h	2014-03-17 18:33:50.703106142 +0000
@@ -19,8 +19,10 @@
 #define G3D_VER 80100
 
 // fatal error for unsupported architectures
-#if defined(__powerpc__)
-#   error PowerPC is not supported by G3D!
+#ifndef USE_STANDARD_ASM
+#   if defined(__powerpc__)
+#      error PowerPC is not supported by G3D!
+#   endif
 #endif
 
 #if defined(G3D_RELEASEDEBUG)
@@ -280,6 +282,16 @@ int WINAPI WinMain(HINSTANCE hInst, HINS
 #       endif
 #   endif // calling conventions
 
+#   ifdef USE_STANDARD_ASM
+#       ifndef __cdecl
+#           define __cdecl __attribute__((cdecl))
+#       endif
+
+#       ifndef __stdcall
+#           define __stdcall __attribute__((stdcall))
+#       endif
+#   endif
+
 /** @def G3D_CHECK_PRINTF_METHOD_ARGS()
     Enables printf parameter validation on gcc. */
 #   define G3D_CHECK_PRINTF_METHOD_ARGS   __attribute__((__format__(__printf__, 2, 3)))
diff -rupN ORIG/TrinityCore/dep/g3dlite/source/System.cpp PCA/trinitycore-portable/dep/g3dlite/source/System.cpp
--- ORIG/TrinityCore/dep/g3dlite/source/System.cpp	2014-03-17 18:27:26.935099247 +0000
+++ PCA/trinitycore-portable/dep/g3dlite/source/System.cpp	2014-03-17 18:33:55.107106221 +0000
@@ -1724,9 +1724,9 @@ void System::cpuid(CPUIDFunction func, u
 #endif
 }
 
-#elif defined(G3D_OSX) && ! defined(G3D_OSX_INTEL)
+#elif defined(USE_STANDARD_ASM) || defined(G3D_OSX) && ! defined(G3D_OSX_INTEL)
 
-// non-intel OS X; no CPUID
+// non-x86 CPU; no CPUID
 void System::cpuid(CPUIDFunction func, uint32& eax, uint32& ebx, uint32& ecx, uint32& edx) {
     eax = 0;
     ebx = 0;
diff -rupN ORIG/TrinityCore/dep/jemalloc/jemalloc_defs.h.in.cmake PCA/trinitycore-portable/dep/jemalloc/jemalloc_defs.h.in.cmake
--- ORIG/TrinityCore/dep/jemalloc/jemalloc_defs.h.in.cmake	2014-03-17 18:27:26.943099247 +0000
+++ PCA/trinitycore-portable/dep/jemalloc/jemalloc_defs.h.in.cmake	2014-03-17 18:41:05.179113947 +0000
@@ -46,7 +46,12 @@
  * Hyper-threaded CPUs may need a special instruction inside spin loops in
  * order to yield to another virtual CPU.
  */
+
+#ifdef USE_STANDARD_ASM
+#define CPU_SPINWAIT __asm__ volatile("nop")
+#else
 #define CPU_SPINWAIT __asm__ volatile("pause")
+#endif
 
 /* Defined if the equivalent of FreeBSD's atomic(9) functions are available. */
 /* #undef JEMALLOC_ATOMIC9 */
diff -rupN ORIG/TrinityCore/dep/mersennetwister/MersenneTwister.h PCA/trinitycore-portable/dep/mersennetwister/MersenneTwister.h
--- ORIG/TrinityCore/dep/mersennetwister/MersenneTwister.h	1970-01-01 01:00:00.000000000 +0100
+++ PCA/trinitycore-portable/dep/mersennetwister/MersenneTwister.h	2014-03-17 18:41:05.179113947 +0000
@@ -0,0 +1,405 @@
+// MersenneTwister.h
+// Mersenne Twister random number generator -- a C++ class MTRand
+// Based on code by Makoto Matsumoto, Takuji Nishimura, and Shawn Cokus
+// Richard J. Wagner  v1.0  15 May 2003  rjwagner@writeme.com
+
+// The Mersenne Twister is an algorithm for generating random numbers.  It
+// was designed with consideration of the flaws in various other generators.
+// The period, 2^19937-1, and the order of equidistribution, 623 dimensions,
+// are far greater.  The generator is also fast; it avoids multiplication and
+// division, and it benefits from caches and pipelines.  For more information
+// see the inventors' web page at http://www.math.keio.ac.jp/~matumoto/emt.html
+
+// Reference
+// M. Matsumoto and T. Nishimura, "Mersenne Twister: A 623-Dimensionally
+// Equidistributed Uniform Pseudo-Random Number Generator", ACM Transactions on
+// Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.
+
+// Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
+// Copyright (C) 2000 - 2003, Richard J. Wagner
+// All rights reserved.
+//
+// Redistribution and use in source and binary forms, with or without
+// modification, are permitted provided that the following conditions
+// are met:
+//
+//   1. Redistributions of source code must retain the above copyright
+//      notice, this list of conditions and the following disclaimer.
+//
+//   2. Redistributions in binary form must reproduce the above copyright
+//      notice, this list of conditions and the following disclaimer in the
+//      documentation and/or other materials provided with the distribution.
+//
+//   3. The names of its contributors may not be used to endorse or promote
+//      products derived from this software without specific prior written
+//      permission.
+//
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+// A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+// The original code included the following notice:
+//
+//     When you use this, send an email to: matumoto@math.keio.ac.jp
+//     with an appropriate reference to your work.
+//
+// It would be nice to CC: rjwagner@writeme.com and Cokus@math.washington.edu
+// when you write.
+
+#ifndef MERSENNETWISTER_H
+#define MERSENNETWISTER_H
+
+// Not thread safe (unless auto-initialization is avoided and each thread has
+// its own MTRand object)
+
+#include"Define.h"
+
+#include <limits.h>
+#include <time.h>
+#include <math.h>
+
+class MTRand {
+// Data
+public:
+    typedef ::uint32 uint32;
+    enum { N = 624 };       // length of state vector
+    enum { SAVE = N + 1 };  // length of array for save()
+
+protected:
+    enum { M = 397 };  // period parameter
+
+    uint32 state[N];   // internal state
+    uint32 *pNext;     // next value to get from state
+    int left;          // number of values left before reload needed
+
+//Methods
+public:
+    MTRand( const uint32& oneSeed );  // initialize with a simple uint32
+    MTRand( uint32 *const bigSeed, uint32 const seedLength = N );  // or an array
+    MTRand();                         // auto-initialize with /dev/urandom or time() and clock()
+    MTRand(const MTRand&);            // prevent copy constructor
+    MTRand& operator=(const MTRand&); // no-op operator=
+
+    // Do NOT use for CRYPTOGRAPHY without securely hashing several returned
+    // values together, otherwise the generator state can be learned after
+    // reading 624 consecutive values.
+
+    // Access to 32-bit random numbers
+    double rand();                          // real number in [0,1]
+    double rand( const double& n );         // real number in [0,n]
+    double randExc();                       // real number in [0,1)
+    double randExc( const double& n );      // real number in [0,n)
+    double randDblExc();                    // real number in (0,1)
+    double randDblExc( const double& n );   // real number in (0,n)
+    uint32 randInt();                       // integer in [0,2^32-1]
+    uint32 randInt( const uint32& n );      // integer in [0,n] for n < 2^32
+    double operator()() { return rand(); }  // same as rand()
+
+    // Access to 53-bit random numbers (capacity of IEEE double precision)
+    double rand53();  // real number in [0,1)
+
+    // Access to nonuniform random number distributions
+    double randNorm( const double& mean = 0.0, const double& variance = 0.0 );
+
+    // Re-seeding functions with same behavior as initializers
+    void seed( const uint32 oneSeed );
+    void seed( uint32 *const bigSeed, const uint32 seedLength = N );
+    void seed();
+
+    // Saving and loading generator state
+    void save( uint32* saveArray ) const;  // to array of size SAVE
+    void load( uint32 *const loadArray );  // from such array
+    /* Trinity not use streams for random values output
+    friend std::ostream& operator<<( std::ostream& os, const MTRand& mtrand );
+    friend std::istream& operator>>( std::istream& is, MTRand& mtrand );
+    */
+protected:
+    void initialize( const uint32 oneSeed );
+    void reload();
+    uint32 hiBit( const uint32& u ) const { return u & 0x80000000UL; }
+    uint32 loBit( const uint32& u ) const { return u & 0x00000001UL; }
+    uint32 loBits( const uint32& u ) const { return u & 0x7fffffffUL; }
+    uint32 mixBits( const uint32& u, const uint32& v ) const
+        { return hiBit(u) | loBits(v); }
+    uint32 twist( const uint32& m, const uint32& s0, const uint32& s1 ) const
+        { return m ^ (mixBits(s0,s1)>>1) ^ uint32(-(int32)(loBit(s1) & 0x9908b0dfUL)); }
+    static uint32 hash( time_t t, clock_t c );
+};
+
+inline MTRand::MTRand(const MTRand&)
+    { seed(); }
+
+inline MTRand& MTRand::operator=(const MTRand&)
+    { return *this; }
+
+inline MTRand::MTRand( const uint32& oneSeed )
+    { seed(oneSeed); }
+
+inline MTRand::MTRand( uint32 *const bigSeed, const uint32 seedLength )
+    { seed(bigSeed,seedLength); }
+
+inline MTRand::MTRand()
+    { seed(); }
+
+inline double MTRand::rand()
+    { return double(randInt()) * (1.0/4294967295.0); }
+
+inline double MTRand::rand( const double& n )
+    { return rand() * n; }
+
+inline double MTRand::randExc()
+    { return double(randInt()) * (1.0/4294967296.0); }
+
+inline double MTRand::randExc( const double& n )
+    { return randExc() * n; }
+
+inline double MTRand::randDblExc()
+    { return ( double(randInt()) + 0.5 ) * (1.0/4294967296.0); }
+
+inline double MTRand::randDblExc( const double& n )
+    { return randDblExc() * n; }
+
+inline double MTRand::rand53()
+{
+    uint32 a = randInt() >> 5, b = randInt() >> 6;
+    return ( a * 67108864.0 + b ) * (1.0/9007199254740992.0);  // by Isaku Wada
+}
+
+inline double MTRand::randNorm( const double& mean, const double& variance )
+{
+    // Return a real number from a normal (Gaussian) distribution with given
+    // mean and variance by Box-Muller method
+    double r = sqrt( -2.0 * log( 1.0-randDblExc()) ) * variance;
+    double phi = 2.0 * 3.14159265358979323846264338328 * randExc();
+    return mean + r * cos(phi);
+}
+
+inline MTRand::uint32 MTRand::randInt()
+{
+    // Pull a 32-bit integer from the generator state
+    // Every other access function simply transforms the numbers extracted here
+
+    if( left == 0 ) reload();
+    --left;
+
+    register uint32 s1;
+    s1 = *pNext++;
+    s1 ^= (s1 >> 11);
+    s1 ^= (s1 <<  7) & 0x9d2c5680UL;
+    s1 ^= (s1 << 15) & 0xefc60000UL;
+    return ( s1 ^ (s1 >> 18) );
+}
+
+inline MTRand::uint32 MTRand::randInt( const uint32& n )
+{
+    // Find which bits are used in n
+    // Optimized by Magnus Jonsson (magnus@smartelectronix.com)
+    uint32 used = n;
+    used |= used >> 1;
+    used |= used >> 2;
+    used |= used >> 4;
+    used |= used >> 8;
+    used |= used >> 16;
+
+    // Draw numbers until one is found in [0,n]
+    uint32 i;
+    do
+        i = randInt() & used;  // toss unused bits to shorten search
+    while( i > n );
+    return i;
+}
+
+inline void MTRand::seed( const uint32 oneSeed )
+{
+    // Seed the generator with a simple uint32
+    initialize(oneSeed);
+    reload();
+}
+
+inline void MTRand::seed( uint32 *const bigSeed, const uint32 seedLength )
+{
+    // Seed the generator with an array of uint32's
+    // There are 2^19937-1 possible initial states.  This function allows
+    // all of those to be accessed by providing at least 19937 bits (with a
+    // default seed length of N = 624 uint32's).  Any bits above the lower 32
+    // in each element are discarded.
+    // Just call seed() if you want to get array from /dev/urandom
+    initialize(19650218UL);
+    register int i = 1;
+    register uint32 j = 0;
+    register int k = ( N > int(seedLength) ? N : int(seedLength) );
+    for (; k; --k )
+    {
+        state[i] =
+            state[i] ^ ( (state[i-1] ^ (state[i-1] >> 30)) * 1664525UL );
+        state[i] += ( bigSeed[j] & 0xffffffffUL ) + j;
+        state[i] &= 0xffffffffUL;
+        ++i;  ++j;
+        if( i >= N ) { state[0] = state[N-1];  i = 1; }
+        if( j >= seedLength ) j = 0;
+    }
+    for (k = N - 1; k; --k )
+    {
+        state[i] =
+            state[i] ^ ( (state[i-1] ^ (state[i-1] >> 30)) * 1566083941UL );
+        state[i] -= i;
+        state[i] &= 0xffffffffUL;
+        ++i;
+        if( i >= N ) { state[0] = state[N-1];  i = 1; }
+    }
+    state[0] = 0x80000000UL;  // MSB is 1, assuring non-zero initial array
+    reload();
+}
+
+inline void MTRand::seed()
+{
+    // Seed the generator with hash of time() and clock() values
+    seed( hash( time(NULL), clock() ) );
+}
+
+inline void MTRand::initialize( const uint32 seed )
+{
+    // Initialize generator state with seed
+    // See Knuth TAOCP Vol 2, 3rd Ed, p.106 for multiplier.
+    // In previous versions, most significant bits (MSBs) of the seed affect
+    // only MSBs of the state array.  Modified 9 Jan 2002 by Makoto Matsumoto.
+    register uint32 *s = state;
+    register uint32 *r = state;
+    register int i = 1;
+    *s++ = seed & 0xffffffffUL;
+    for (; i < N; ++i )
+    {
+        *s++ = ( 1812433253UL * ( *r ^ (*r >> 30) ) + i ) & 0xffffffffUL;
+        r++;
+    }
+}
+
+inline void MTRand::reload()
+{
+    // Generate N new values in state
+    // Made clearer and faster by Matthew Bellew (matthew.bellew@home.com)
+    register uint32 *p = state;
+    register int i;
+    for (i = N - M; i--; ++p )
+        *p = twist( p[M], p[0], p[1] );
+    for (i = M; --i; ++p )
+        *p = twist( p[M-N], p[0], p[1] );
+    *p = twist( p[M-N], p[0], state[0] );
+
+    left = N, pNext = state;
+}
+
+inline MTRand::uint32 MTRand::hash( time_t t, clock_t c )
+{
+    // Get a uint32 from t and c
+    // Better than uint32(x) in case x is floating point in [0,1]
+    // Based on code by Lawrence Kirby (fred@genesis.demon.co.uk)
+
+    static uint32 differ = 0;  // guarantee time-based seeds will change
+
+    uint32 h1 = 0;
+    unsigned char *p = (unsigned char *) &t;
+    for (size_t i = 0; i < sizeof(t); ++i )
+    {
+        h1 *= UCHAR_MAX + 2U;
+        h1 += p[i];
+    }
+    uint32 h2 = 0;
+    p = (unsigned char *) &c;
+    for (size_t j = 0; j < sizeof(c); ++j )
+    {
+        h2 *= UCHAR_MAX + 2U;
+        h2 += p[j];
+    }
+    return ( h1 + differ++ ) ^ h2;
+}
+
+inline void MTRand::save( uint32* saveArray ) const
+{
+    register uint32 *sa = saveArray;
+    register const uint32 *s = state;
+    register int i = N;
+    for (; i--; *sa++ = *s++ ) {}
+    *sa = left;
+}
+
+inline void MTRand::load( uint32 *const loadArray )
+{
+    register uint32 *s = state;
+    register uint32 *la = loadArray;
+    register int i = N;
+    for (; i--; *s++ = *la++ ) {}
+    left = *la;
+    pNext = &state[N-left];
+}
+
+/* Trinity not use streams for random values output
+inline std::ostream& operator<<( std::ostream& os, const MTRand& mtrand )
+{
+    register const MTRand::uint32 *s = mtrand.state;
+    register int i = mtrand.N;
+    for (; i--; os << *s++ << "\t" ) {}
+    return os << mtrand.left;
+}
+
+inline std::istream& operator>>( std::istream& is, MTRand& mtrand )
+{
+    register MTRand::uint32 *s = mtrand.state;
+    register int i = mtrand.N;
+    for (; i--; is >> *s++ ) {}
+    is >> mtrand.left;
+    mtrand.pNext = &mtrand.state[mtrand.N-mtrand.left];
+    return is;
+}
+*/
+
+#endif  // MERSENNETWISTER_H
+
+// Change log:
+//
+// v0.1 - First release on 15 May 2000
+//      - Based on code by Makoto Matsumoto, Takuji Nishimura, and Shawn Cokus
+//      - Translated from C to C++
+//      - Made completely ANSI compliant
+//      - Designed convenient interface for initialization, seeding, and
+//        obtaining numbers in default or user-defined ranges
+//      - Added automatic seeding from /dev/urandom or time() and clock()
+//      - Provided functions for saving and loading generator state
+//
+// v0.2 - Fixed bug which reloaded generator one step too late
+//
+// v0.3 - Switched to clearer, faster reload() code from Matthew Bellew
+//
+// v0.4 - Removed trailing newline in saved generator format to be consistent
+//        with output format of built-in types
+//
+// v0.5 - Improved portability by replacing static const int's with enum's and
+//        clarifying return values in seed(); suggested by Eric Heimburg
+//      - Removed MAXINT constant; use 0xffffffffUL instead
+//
+// v0.6 - Eliminated seed overflow when uint32 is larger than 32 bits
+//      - Changed integer [0,n] generator to give better uniformity
+//
+// v0.7 - Fixed operator precedence ambiguity in reload()
+//      - Added access for real numbers in (0,1) and (0,n)
+//
+// v0.8 - Included time.h header to properly support time_t and clock_t
+//
+// v1.0 - Revised seeding to match 26 Jan 2002 update of Nishimura and Matsumoto
+//      - Allowed for seeding with arrays of any length
+//      - Added access for real numbers in [0,1) with 53-bit resolution
+//      - Added access for real numbers from normal (Gaussian) distributions
+//      - Increased overall speed by optimizing twist()
+//      - Doubled speed of integer [0,n] generation
+//      - Fixed out-of-range number generation on 64-bit machines
+//      - Improved portability by substituting literal constants for long enum's
+//      - Changed license from GNU LGPL to BSD
+
diff -rupN ORIG/TrinityCore/dep/PackageList.txt PCA/trinitycore-portable/dep/PackageList.txt
--- ORIG/TrinityCore/dep/PackageList.txt	2014-03-17 18:27:26.807099245 +0000
+++ PCA/trinitycore-portable/dep/PackageList.txt	2014-03-17 18:41:22.831114264 +0000
@@ -20,6 +20,10 @@ libMPQ (a library for reading MPQ files)
   https://libmpq.org/
   Version: 1.0.4
 
+MersenneTwister (a very fast random number generator)
+   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
+   Version: 0.4.2
+
 MySQL (the world's most popular open source database software)
   http://www.mysql.com/
   Version: 5.5.9 (GA)
diff -rupN ORIG/TrinityCore/README.md PCA/trinitycore-portable/README.md
--- ORIG/TrinityCore/README.md	2014-03-17 18:27:26.807099245 +0000
+++ PCA/trinitycore-portable/README.md	2014-03-17 19:40:10.779177642 +0000
@@ -1,4 +1,4 @@
-# ![logo](http://www.trinitycore.org/f/public/style_images/1_trinitycore.png) TrinityCore
+# ![logo](http://www.trinitycore.org/f/public/style_images/1_trinitycore.png) TrinityCore-Portable
 
 
 ## Introduction
@@ -18,11 +18,14 @@ make pull requests to our [Github reposi
 For further information on the TrinityCore project, please visit our project
 website at [TrinityCore.org](http://www.trinitycore.org).
 
+Modifications for portability by Pablo Crossa
+
+trinitycore-portable.patch attached to allow patching of newer versions easily
 
 ## Requirements
 
 + Platform: Linux, Windows or Mac
-+ Processor with SSE2 support
++ Processor with SSE2 support (Unless you compile with cmake option "SKIP_SSE2")
 + ACE ≥ 5.8.3 (included for Windows)
 + MySQL ≥ 5.1.0 (included for Windows)
 + CMake ≥ 2.8.0
@@ -39,6 +42,19 @@ Detailed installation guides are availab
 [Mac OSX](http://collab.kpsn.org/display/tc/How-to_Mac).
 
 
+For compilation on other architectures than x86/x64 you must use the cmake option "STANDARDIZE_ASM" (This will automatically enable SKIP_SSE2).
+
+Example for compilation: cmake -DSKIP_SSE2=1 -DSTANDARDIZE_ASM=1 -DPREFIX=/home/<username>/server
+
+This compiles on the Raspberry Pi's 'Raspbian' following the Wiki from TrinityCore with mild variations:
+  Use unrar-free instead of unrar
+  Use the libace-dev from Raspbian instead of compiling (compiling is slow)
+
+I haven't tested this in any architecture other than ARM (it does compile on PowerPC) but others might work with GCC/ICC/MINGW
+
+Just don't use CLANG...
+
+
 ## Reporting issues
 
 Issues can be reported via the [Github issue tracker](https://github.com/TrinityCore/TrinityCore/issues?labels=Branch-3.3.5a).
diff -rupN ORIG/TrinityCore/src/server/shared/Utilities/Util.cpp PCA/trinitycore-portable/src/server/shared/Utilities/Util.cpp
--- ORIG/TrinityCore/src/server/shared/Utilities/Util.cpp	2014-03-17 18:27:31.127099323 +0000
+++ PCA/trinitycore-portable/src/server/shared/Utilities/Util.cpp	2014-03-17 18:42:04.271115008 +0000
@@ -19,10 +19,50 @@
 #include "Util.h"
 #include "Common.h"
 #include "utf8.h"
+
+#ifdef USE_MERSENNETWISTER
+#include "../mersennetwister/MersenneTwister.h"
+#else
 #include "SFMT.h"
+#endif
+
 #include "Errors.h" // for ASSERT
 #include <ace/TSS_T.h>
 
+#ifdef USE_MERSENNETWISTER
+typedef ACE_TSS<MTRand> MTRandTSS;
+static MTRandTSS mtRand;
+
+int32 irand(int32 min, int32 max)
+{
+    return int32(mtRand->randInt(max - min)) + min;
+}
+
+uint32 urand(uint32 min, uint32 max)
+{
+    return mtRand->randInt(max - min) + min;
+}
+
+float frand(float min, float max)
+{
+    return float(mtRand->randExc(max - min) + min);
+}
+
+int32 rand32()
+{
+    return mtRand->randInt();
+}
+
+double rand_norm(void)
+{
+    return mtRand->randExc();
+}
+
+double rand_chance(void)
+{
+    return mtRand->randExc(100.0);
+}
+#else
 typedef ACE_TSS<SFMTRand> SFMTRandTSS;
 static SFMTRandTSS sfmtRand;
 
@@ -58,6 +98,7 @@ double rand_chance(void)
 {
     return sfmtRand->Random() * 100.0;
 }
+#endif
 
 Tokenizer::Tokenizer(const std::string &src, const char sep, uint32 vectorReserve)
 {
